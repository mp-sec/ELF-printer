#!usr/bin/python3

from time import time 
from datetime import datetime
# import binascii

print("Report generated by: NAME HERE")
print("Contact:\t CONTACT INFORMATION HERE")
now = datetime.now()
currentTime = now.strftime("%b-%d-%Y %H:%M:%S")
currentUTC = int(time())
print("Date/Time:\t ", currentTime, " (UTC: ", currentUTC, ")", sep = "")

with open("FILE PATH HERE", "rb") as reader:
	# seek(offset, whence)'s whence value can be any of the three:
		# 0 = Beginning of the file (if nothing is written then it defaults to 0)
		# 1 = From the current offset 
		# 2 = End of the file 
	# With the OS module imported, it is possible to instead do:
		# os.SEEK_SET = Beginning of the file (this is the default behavior if nothing is stated)
		# os.SEEK_CUR = From the current offset
		# os.SEEK_END = End of the file 
	reader.seek(0, 0)
	# print("Current offset:", reader.tell())

	# Reads the first 4 bytes, removes the unnecessary parts of the string, and reverses it 
	magicNum = reader.read(4)[::-1]
	magicNum = magicNum.hex()
	# binascii module method (after reading and reversing): 
		# magicNum = str(binascii.hexlify(magicNum))
		# magicNum = "0x" + magicNum.replace("b'", "").strip("'")
	print("\tMagic:\t\t", magicNum, sep = "")
	
	# Reads a single byte for the format, which determinds whether it is a 32-bit or 64-bit file 
	# print("Format offset:", reader.tell())
	#reader.seek(1, 1)
	fileFormat = str(reader.read(1))
	if "1" in fileFormat: 
		print("\tFormat:\t\t32-bit")
	else: 
		print("\tFormat:\t\t64-bit")
	# print("Format offset:", reader.tell())
	
	# Reads a single bit to determine the endianess of the file 
	# print("Endian offset:", reader.tell())
	#reader.seek(1, 1)
	endian = str(reader.read(1))
	if "1" in endian: 
		print("\tEndian:\t\tLittle")
	else:
		print("\tEndian:\t\t Big")
	# print("Endian offset:", reader.tell())
	
	# print("Machine offset:", reader.tell())
	# Can seek() using a hex offset instead of the decimal value
	# The hex value 0x12 is equivalent to 18 in decimal 
	reader.seek(0x12, 0)
	machine = reader.read(2)[::-1]
	machine = str(machine.hex()).replace("00", "0x").upper()
	if "00" in machine:
		print("\tMachine:\tNo specific instruction set")
	elif "03" in machine:
		print("\tMachine:\tx86")
	elif "32" in machine:
		print("\tMachine:\txIA-64")
	elif "3E" in machine:
		print("\tMachine:\tamd64")
	# print("\tMachine:\t", machine)
	# print("Machine offset:", reader.tell())
	
	# print("Entry offset:", reader.tell())
	# reader.seek(0x18, 0)
	reader.seek(4, 1) 
	entryPoint = reader.read(8)
	entryPoint = str(entryPoint.hex())
	print("\tEntry Point:\t0x", entryPoint, sep = "")
	
	# print("End offset:", reader.tell())
	
